# 2.3 스케줄링

## 2.3.1 스케줄링 단계

1. 상위단계 스케줄링
    - 시스템에 들어오는 작업들을 선택하여 프로세스를 생성한 후 프로세스 준비 큐에 전달하는 역할
    - 선택 기준 : 시스템의 자원을 효율적으로 이용할 수 있도록 하는 것
    - 입출력(I/O) 중심 작업과 연산 중심 작업을 균형있게 선택
2. 하위단계 스케줄링
    - 사용 가능한 CPU를 준비상태의  어느 프로세스에 배당할지를 결정
    - 이 결정을 통하여 CPU를 배당받은 프로세스는 결국 실행상태가 되어 프로세스가 처리됨.
    - 수행 주체 : 디스패처(dispatcher)
3. 중간단계 스케줄링
    - 프로세스를 일시적으로 메모리에서 제거하여 중지시키거나 다시 활성화 시켜서 시스템에 대한 단기적인 부하를 조절

## 2.3.2 스케줄링 정책

1. 스케줄링의 기본 목표
    - 공정성 : 모든 프로세스가 적정 수준에서 CPU 작업을 할 수 있게 함
    - 균형 : 시스템의 자원들이 충분히 활용될 수 있게 함
2. 일괄처리 운영체제의 스케줄링 목표
    - 처리량의 극대화
    - 반환시간의 최소화
    - CPU 활용의 극대화
3. 대화형 운영체제의 스케줄링 목표
    - 빠른 응답시간
    - 과대한 대기방식
4. 실시간 운영체제의 스케줄링 목표
    - 처리 기한을 맞춤
5. 선점 스케줄링 정책
    - 진행 중인 프로세스에 인터럽트를 걸고 다른 프로세스에 CPU를 할당하는 프로세스 스케줄링 전략
    - 높은 우선순위의 프로세스를 긴급하게 처리하는 경우에 유용
    - 대화식 시분할 시스템에서 빠른 응답시간을 유지하는데 유용
    - 문맥 교환에 따른 오버헤드 발생
6. 문맥 교환(context switching)
    - 문맥 : CPU의 모든 레지스터와 기타 운영체제에 따라 요구되는 프로세스의 상태
    - CPU가 현재 실행하고 있는 프로세스의 문맥을 프로세스 제어블록(PCB)에 저장하고, 다음 프로세스의 PCB로부터 문맥을 복원하는 작업
    - 운영체제는 문맥 교환이 매우 빠르게 실행되도록 만들어져야 함
7. 비선점 스케줄링 정책
     - 프로세스가 CPU를 할당 받아 실행이 시작되면 작업 자체가 I/O 인터럽트를 걸거나 작업을 종료할 때까지 실행 상태에 있게 됨.
     - 모든 프로세스가 공정하게 순서에 따라 실행되도록 관리 됨(응답시간 예측 가능).
     - 짧은 프로세스가 긴 프로세스를 기다리게 되는 경우가 발생할 수 있음
